#! /bin/bash -eu

if [ "$BASH_SOURCE" != "$0" ]
then
  echo "$BASH_SOURCE must be executed, not sourced"
  return 1 # shouldn't use exit when sourced
fi

if [ "${FLOCKED:-}" != "$0" ]
then
  if FLOCKED="$0" flock -en -E 99 "$0" "$0" "$@" || case "$?" in
  99) echo already running
      exit 99
      ;;
  *)  exit $?
      ;;
  esac
  then
    # success
    exit 0
  fi
fi

# turning off hdmi saves a little bit of power
/usr/bin/tvservice -o

export STORAGE_MOUNT=/backingfiles
export ARCHIVE_MOUNT=/mnt/archive
export CAM_MOUNT=/mnt/cam
export MUSIC_MOUNT=/mnt/music
export ARCHIVE_MOUNT=/mnt/archive
export MUSIC_ARCHIVE_MOUNT=/mnt/musicarchive

function log () {
  echo "$1"
}

if [ ! -f /root/teslausb.conf ]
then
  log "couldn't find /root/teslausb.conf"
  exit 1
fi

source /root/teslausb.conf

if [ -z "${ARCHIVE_HOST_NAME+x}" ]
then
  log "ARCHIVE_HOST_NAME not set"
  exit 1
fi

function isPi4 {
  grep -q "Pi 4" /sys/firmware/devicetree/base/model
}

function timestamp () {
  local prefix=${1:-}
  while IFS= read line
  do
    echo "$(date): $prefix$line"
  done
}

function trim_mount_point () {
  local mount_point="$1"
  log "Trimming $mount_point..."
  fstrim "$mount_point"
  sync
  log "Finished trim on $mount_point."
}

function fix_errors_in_mount_point () {
  local mount_point="$1"
  log "Running fsck on $mount_point..."
  local backingfile=$(mount | grep -w "$mount_point" | awk '{print $1}')
  local loopback=$(losetup -l | grep -w  "$backingfile" | awk '{print $1}')
  fsck -p "$loopback" |& timestamp '| ' || echo ""
  log "Finished fsck on $mount_point."
}

function archive_is_reachable () {
  local reachable=true

  /root/bin/archive-is-reachable.sh "$ARCHIVE_HOST_NAME" || reachable=false

  if [ "$reachable" = false ]
  then
    false
    return
  fi
  true
}

function connect_usb_drives_to_host() {
  log "Connecting usb to host..."
  modprobe g_mass_storage
  log "Connected usb to host."
}

function wait_for_archive_to_be_reachable () {
  log "Waiting for archive to be reachable..."
  while [ true ]
  do
    if archive_is_reachable
    then
      log "Archive is reachable."
      break
    fi
    if [ -e /tmp/archive_is_reachable ]
    then
      log "Simulating archive is reachable"
      rm /tmp/archive_is_reachable
      break
    fi
    sleep 1
  done
}

function retry () {
  local attempts=0
  while [ true ]
  do
    if eval "$@"
    then
      true
      return
    fi
    if [ "$attempts" -ge 10 ]
    then
      log "Attempts exhausted."
      false
      return
    fi
    log "Sleeping before retry..."
    /bin/sleep 1
    attempts=$((attempts + 1))
    log "Retrying..."
  done
  false
  return
}

function mount_mountpoint () {
  local mount_point="$1"
  log "Mounting $mount_point..."

  local mounted=true
  mount "$mount_point" || mounted=false
  if [ "$mounted" = true ]
  then
    log "Mounted $mount_point."
    true
    return
  else
    log "Failed to mount $mount_point."
    false
    return
  fi
}

function ensure_mountpoint_is_mounted () {
  local mount_point="$1"
  local mount_exists=true

  findmnt --mountpoint "$mount_point" > /dev/null || mount_exists=false

  if [ "$mount_exists" = true ]
  then
    log "$mount_point is already mounted."
  else
    mount_mountpoint "$mount_point"
  fi
}

function ensure_mountpoint_is_mounted_with_retry () {
  retry ensure_mountpoint_is_mounted "$1"
}

function fix_errors_in_cam_file () {
  fix_errors_in_mount_point "$CAM_MOUNT"
}

function trim_cam_file () {
  trim_mount_point "$CAM_MOUNT"
}

function ensure_cam_file_is_mounted () {
  log "Ensuring cam file is mounted..."
  ensure_mountpoint_is_mounted_with_retry "$CAM_MOUNT"
  log "Ensured cam file is mounted."
}

function ensure_music_file_is_mounted () {
  log "Ensuring music backing file is mounted..."
  ensure_mountpoint_is_mounted_with_retry "$MUSIC_MOUNT"
  log "Ensured music drive is mounted."
}

function unmount_mount_point () {
  local mount_point="$1"
  log "Unmounting $mount_point..."
  if umount "$mount_point"
  then
    log "Unmounted $mount_point."
  else
    log "Failed to unmount $mount_point, trying lazy unmount."
    if umount -l "$mount_point"
    then
      log "lazily unmounted $mount_point"
    else
      log "lazy unmount failed"
    fi
  fi
}

function unmount_cam_file () {
  unmount_mount_point "$CAM_MOUNT"
}

function unmount_music_file () {
  unmount_mount_point "$MUSIC_MOUNT"
}

function trim_music_file () {
  trim_mount_point "$MUSIC_MOUNT"
}

function fix_errors_in_music_file () {
  fix_errors_in_mount_point "$MUSIC_MOUNT"
}

function wait_for_archive_to_be_unreachable () {
  log "Waiting for archive to be unreachable..."
  while [ true ]
    do
      if ! retry archive_is_reachable
      then
        log "Archive is unreachable."
        break
      fi
      if [ -e /tmp/archive_is_unreachable ]
      then
        log "Simulating archive being unreachable."
        rm /tmp/archive_is_unreachable
        break
      fi
      sleep 1
  done
}

function check_if_usb_gadget_is_mounted () {
    if ! grep -q cam_disk.bin /sys/devices/platform/soc/??980000.usb/gadget/lun?/file >/dev/null 2>&1
    then
        log "USB Gadget not mounted. Fixing files and remounting..."
        disconnect_usb_drives_from_host
        mount_and_fix_errors_in_files
        connect_usb_drives_to_host
    fi
}

function mount_and_fix_errors_in_cam_file () {
  fix_errors_in_cam_file
  ensure_cam_file_is_mounted
  trim_cam_file
  unmount_cam_file
}

function mount_and_fix_errors_in_music_file () {
  if [ -e "$MUSIC_MOUNT" ]
  then
    ensure_music_file_is_mounted
    fix_errors_in_music_file
    trim_music_file
    unmount_music_file
  fi
}

function mount_and_fix_errors_in_files () {
  mount_and_fix_errors_in_cam_file
  mount_and_fix_errors_in_music_file
}

function disconnect_usb_drives_from_host () {
  log "Disconnecting usb from host..."
  modprobe -r g_mass_storage
  log "Disconnected usb from host."
}

function archive_teslacam_clips () {
    log "Checking saved folder count..."
  
    DIR_COUNT=$(cd $STORAGE_MOUNT/TeslaCam && find -L . -maxdepth 2 -path './SavedClips/*' -o -path './SentryClips/*' -type d | wc -l)
    FILE_COUNT=$(cd $STORAGE_MOUNT/TeslaCam && find -L . -maxdepth 3 -path './SavedClips/*' -o -path './SentryClips/*' -type f | wc -l)
  
    log "There are $DIR_COUNT event folder(s) with $FILE_COUNT file(s) to archive."
  
    if [ $DIR_COUNT -gt 0 ]
    then
        log "Starting recording archiving: $DIR_COUNT event folder(s) with $FILE_COUNT file(s)"

        /root/bin/send-push-message "TeslaUSB:" "Archiving $DIR_COUNT event folder(s) with $FILE_COUNT file(s) starting at $(date)"

        # Ensure Sentry Mode is enabled before archiving
        declare is_sentry_mode_enabled
        if [ -x /root/bin/tesla_api.py ]
        then
            is_sentry_mode_enabled=$(/root/bin/tesla_api.py is_sentry_mode_enabled | tr '[:upper:]' '[:lower:]')
            if [ "false" = "${is_sentry_mode_enabled}" ]
            then
                log "Temporarily enabling Sentry Mode to power the RPi while archive job completes..."
                /root/bin/tesla_api.py enable_sentry_mode
            fi
        fi

        /root/bin/archive-clips.sh

        # If Sentry Mode was previously disabled, restore it to that state
        if [ -x /root/bin/tesla_api.py ]
        then
	    if [ "false" = "${is_sentry_mode_enabled}" ]
	    then
	        log "Restoring Sentry Mode to its previous state (disabled)..."
   	         /root/bin/tesla_api.py disable_sentry_mode
	    fi
	fi
    fi
}

function copy_music_files () {
  log "Starting music sync..."

  # FIXME - instead of unmounting for duration of copy
  #  make a snapshot or replacement of music disk
  #  copy music to snapshot
  #  swap in replacement music image
  ensure_music_file_is_mounted

  fix_errors_in_music_file

  /root/bin/copy-music.sh

  trim_music_file

  unmount_music_file
}

function archive_clips () {
  log "Archiving..."

  if ! /root/bin/connect-archive.sh
  then
    log "Couldn't connect archive, skipping archive step"
    return
  fi

  if archive_teslacam_clips
  then
    log "Finished archiving."
  else
    log "Archiving failed."
  fi

  if timeout 5 [ -d "$MUSIC_ARCHIVE_MOUNT" -a -d "$MUSIC_MOUNT" ]
  then
    disconnect_usb_drives_from_host
    log "Copying music..."
    if copy_music_files
    then
      log "Finished copying music."
    else
      log "Copying music failed."
    fi
    connect_usb_drives_to_host
  else
    log "Music archive not configured or unreachable"
  fi
}

function slowblink () {
  echo timer > /sys/class/leds/led0/trigger
  local ON=on
  local OFF=off
  if isPi4
  then
    ON=off
    OFF=on
  fi
  echo 900 > /sys/class/leds/led0/delay_$ON
  echo 100 > /sys/class/leds/led0/delay_$OFF
}

function fastblink () {
  echo timer > /sys/class/leds/led0/trigger
  local ON=on
  local OFF=off
  if isPi4
  then
    ON=off
    OFF=on
  fi
  echo 150 > /sys/class/leds/led0/delay_$ON
  echo 50 > /sys/class/leds/led0/delay_$OFF
}


function doubleblink () {
  echo heartbeat > /sys/class/leds/led0/trigger
  if isPi4
  then
    echo 0 > /sys/class/leds/led0/invert
  else
    echo 1 > /sys/class/leds/led0/invert
  fi
}

function set_time () {
  log "Waiting for time to be set by timesyncd..."
  for i in $(seq 1 10)
  do
    if (timedatectl | grep 'System clock synchronized: yes')
    then
      log "Time now set"
      return
    fi
    sleep 2
  done
  log "Time still not set, attempting to force it"
  if ! systemctl restart systemd-timesyncd
  then
    log "Failed to restart timesyncd daemon"
  fi
  for i in $(seq 1 10)
  do
    if (timedatectl | grep 'System clock synchronized: yes')
    then
      log "Time now set"
      return
    fi
    sleep 2
  done
  if ! (timedatectl | grep 'System clock synchronized: yes')
  then
    log "Failed to set time"
  fi
}

function mount_all_snapshots {
  if ! stat "${STORAGE_MOUNT}"/snapshots/snap-*/snap.bin &> /dev/null
  then
    log "no snapshots"
    return
  fi

  for img in "${STORAGE_MOUNT}"/snapshots/snap-*/snap.bin
  do
    log "mounting snapshot $img"
    imgdir=$(dirname "$img")
    if mount | grep "$imgdir/mnt"
    then
      echo "$img already mounted"
      return
    fi
    /root/bin/mount_image.sh "$img" "$imgdir/mnt"
  done
  log "mounted all snapshots"
}


function snapshotloop {
  while true
  do
    /root/bin/trigger_snapshot.sh
    sleep 3500
  done
}

export ARCHIVE_HOST_NAME
export -f mount_mountpoint
export -f ensure_mountpoint_is_mounted
export -f retry
export -f ensure_mountpoint_is_mounted_with_retry
export -f log

echo "=============================================="
log "Starting archiveloop..."

mount_all_snapshots

if [ "${SNAPSHOTS_ENABLED:-true}" = "true" ]
then
  snapshotloop &
fi

if archive_is_reachable
then
  fastblink

  set_time

  # archive_clips will fix errors in the cam file
  mount_and_fix_errors_in_music_file

  archive_clips

  doubleblink

  wait_for_archive_to_be_unreachable
else
  slowblink

  mount_and_fix_errors_in_files

  connect_usb_drives_to_host
fi

while true
do
  slowblink

  wait_for_archive_to_be_reachable

  fastblink

  set_time

  sleep ${ARCHIVE_DELAY:-20}

if [ "${SNAPSHOTS_ENABLED:-true}" = "true" ]
then
  # take a snapshot before archive_clips starts
  /root/bin/make_snapshot.sh
fi

  archive_clips

  doubleblink

  wait_for_archive_to_be_unreachable

  check_if_usb_gadget_is_mounted
done
